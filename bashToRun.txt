Assembles code called advancedBlink.c into assembly called a.out
./avrgcc/bin/avr-gcc.exe -mmcu=attiny261a advancedBlink.c

Compiles assembly from previous a.out into an intel hex format
./avrgcc/bin/avr-objcopy.exe -O ihex -j .text -j .text a.out a.hex

Programs the actual MCU
./avrdude-v7.1-windows-x64/avrdude.exe -C avrdude-v7.1-windows-x64/avrdude.conf -v -p attiny261a -c stk500v1 -P COM4 -b 19200 -U flash:w:a.hex:i

Flashes the fuses used to control the code
./avrdude-v7.1-windows-x64/avrdude.exe -C avrdude-v7.1-windows-x64/avrdude.conf -v -p attiny261a -c stk500v1 -P COM4 -b 19200 -U lfuse:w:0xE2:m


Software Needed

AVRDUDE:  https://www.nongnu.org/avrdude/
AVRGCC:   https://www.microchip.com/en-us/tools-resources/develop/microchip-studio/gcc-compilers
Helpful Youtube Link: https://www.youtube.com/playlist?list=PLNyfXcjhOAwOF-7S-ZoW2wuQ6Y-4hfjMR

Assembling and Linking

The -c flag will compile, but not link the items. This will create a .o file that will be held until we're ready to link
./avrgcc/bin/avr-gcc.exe -c -mmcu=attiny261a random.c
./avrgcc/bin/avr-gcc.exe -c -mmcu=attiny261a advancedBlink.c

Once everything is compiled, but not linked, we will then link everything together
./avrgcc/bin/avr-gcc.exe -mmcu=attiny261a advancedBlink.o random.O

Then we resume from line 4 above: 
Compiles assembly from previous a.out into an intel hex format
./avrgcc/bin/avr-objcopy.exe -O ihex -j .text -j .text a.out a.hex

Programs the actual MCU
./avrdude-v7.1-windows-x64/avrdude.exe -C avrdude-v7.1-windows-x64/avrdude.conf -v -p attiny261a -c stk500v1 -P COM4 -b 19200 -U flash:w:a.hex:i

